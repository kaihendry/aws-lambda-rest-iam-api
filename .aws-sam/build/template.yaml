AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda REST API with IAM Authentication
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: API Gateway deployment stage
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Architectures:
    - x86_64
Resources:
  ApiBRestrictedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-api-b-restricted-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action: sts:AssumeRole
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api-a
      StageName:
        Ref: Stage
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE
  RestApiB:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api-b
      StageName:
        Ref: Stage
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE
      Policy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - ApiBRestrictedRole
              - Arn
          Action: execute-api:Invoke
          Resource:
            Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*
  RestApiC:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api-c
      StageName:
        Ref: Stage
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE
        ApiKeyRequired: true
  ApiCKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api-c-key
      Description: API Key for API C with IAM authentication
      Enabled: true
  ApiCUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: RestApiC
    Properties:
      UsagePlanName:
        Fn::Sub: ${AWS::StackName}-api-c-usage-plan
      Description: Usage plan for API C
      ApiStages:
      - ApiId:
          Ref: RestApiC
        Stage:
          Ref: Stage
      Throttle:
        RateLimit: 1000
        BurstLimit: 2000
      Quota:
        Limit: 10000
        Period: DAY
  ApiCUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: ApiCUsagePlan
    Properties:
      KeyId:
        Ref: ApiCKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: ApiCUsagePlan
  ApiBRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ApiBAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: execute-api:Invoke
          Resource:
            Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiB}/*
      Roles:
      - Ref: ApiBRestrictedRole
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ApiFunction
      Handler: main
      Runtime: provided.al2
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /{proxy+}
            Method: ANY
        Root:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /
            Method: ANY
        ApiBCatchAll:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiB
            Path: /{proxy+}
            Method: ANY
        ApiBRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiB
            Path: /
            Method: ANY
        ApiCCatchAll:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiC
            Path: /{proxy+}
            Method: ANY
        ApiCRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApiC
            Path: /
            Method: ANY
    Metadata:
      BuildMethod: makefile
      SamResourceId: ApiFunction
Outputs:
  ApiAUrl:
    Description: API Gateway A endpoint URL (open access)
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiAUrl
  ApiBUrl:
    Description: API Gateway B endpoint URL (restricted access)
    Value:
      Fn::Sub: https://${RestApiB}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiBUrl
  ApiCUrl:
    Description: API Gateway C endpoint URL (IAM + API key)
    Value:
      Fn::Sub: https://${RestApiC}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiCUrl
  ApiAId:
    Description: API Gateway A ID
    Value:
      Ref: RestApi
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiAId
  ApiBId:
    Description: API Gateway B ID
    Value:
      Ref: RestApiB
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiBId
  ApiCId:
    Description: API Gateway C ID
    Value:
      Ref: RestApiC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiCId
  ApiBRestrictedRoleArn:
    Description: ARN of the restricted role for API B
    Value:
      Fn::GetAtt:
      - ApiBRestrictedRole
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiBRestrictedRoleArn
  ApiCKeyId:
    Description: API Key ID for API C
    Value:
      Ref: ApiCKey
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiCKeyId
  ApiCKeyValue:
    Description: 'API Key value for API C (retrieve with: aws apigateway get-api-key
      --api-key [KeyId] --include-value)'
    Value:
      Ref: ApiCKey
  CurlCommandApiA:
    Description: Example curl command for API A with AWS SigV4
    Value:
      Fn::Sub: "curl --aws-sigv4 'aws:amz:${AWS::Region}:execute-api' \\\n     --user\
        \ 'AWS_ACCESS_KEY_ID:AWS_SECRET_ACCESS_KEY' \\\n     'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/health'\n"
  CurlCommandApiB:
    Description: Example curl command for API B with AWS SigV4 (requires restricted
      role)
    Value:
      Fn::Sub: "curl --aws-sigv4 'aws:amz:${AWS::Region}:execute-api' \\\n     --user\
        \ 'AWS_ACCESS_KEY_ID:AWS_SECRET_ACCESS_KEY' \\\n     'https://${RestApiB}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/health'\n"
  CurlCommandApiC:
    Description: Example curl command for API C with AWS SigV4 and API key
    Value:
      Fn::Sub: "curl --aws-sigv4 'aws:amz:${AWS::Region}:execute-api' \\\n     --user\
        \ 'AWS_ACCESS_KEY_ID:AWS_SECRET_ACCESS_KEY' \\\n     -H 'X-API-Key: YOUR_API_KEY'\
        \ \\\n     'https://${RestApiC}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/health'\n"
